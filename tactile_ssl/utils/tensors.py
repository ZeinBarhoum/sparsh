# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the license found in the
# LICENSE file in the root directory of this source tree.
#

import math
import torch
import einops


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0.0, std=1.0, a=-2.0, b=2.0):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def patchify_image(imgs, patch_size):
    """
    imgs: (N, 3, H, W)
    x: (N, L, patch_size**2 *3)
    """
    _, C, _, _ = imgs.shape
    assert imgs.shape[3] % patch_size == 0 and imgs.shape[2] % patch_size == 0

    x = einops.rearrange(
        imgs,
        "b c (h p)  (w q) -> b (h w)  (p q c)",
        p=patch_size,
        q=patch_size,
        c=C,
    )
    return x

def unpatchify_image(x, patch_size, image_size, channels):
    """
    x: (N, L, patch_size**2 *3)
    patch_size: int
    imgs: (N, 3, H, W)
    """
    h, w = (int(image_size[0]/patch_size), int(image_size[1]/patch_size))
    assert h * w == x.shape[1]

    imgs = einops.rearrange(
        x,
        " b (h w)  (p q c) -> b c (h p) (w q)",
        p=patch_size,
        q=patch_size,
        c=channels,
        h=h,
        w=w,
    )
    return imgs

